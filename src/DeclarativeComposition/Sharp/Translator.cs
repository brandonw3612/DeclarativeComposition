using System.Text;
using DeclarativeComposition.Utils;

namespace DeclarativeComposition.Sharp;

/// <summary>
/// Translator that generates C# code from the AST.
/// </summary>
public class Translator
{
    /// <summary>
    /// Configuration for the translator.
    /// </summary>
    public TranslatorConfig Config { get; }
    
    /// <summary>
    /// Variable declarations for the generated C# class.
    /// </summary>
    public List<string> VariableDeclarations { get; } = new();
    
    /// <summary>
    /// Body of the initializer for the generated C# class.
    /// </summary>
    public List<string> InitializerBody { get; } = new();
    
    /// <summary>
    /// Constructor for the Translator class.
    /// </summary>
    /// <param name="config">Configuration for the translator.</param>
    public Translator(TranslatorConfig config)
    {
        AnonymousObjectIndexer.Reset();
        Config = config;
    }

    /// <summary>
    /// Collects everything consumed by the translator and generates C# code.
    /// </summary>
    /// <returns></returns>
    public string ToSource()
    {
        StringBuilder sourceBuilder = new();
        sourceBuilder.AppendLine("// Generated by DeclarativeComposition");
        sourceBuilder.AppendLine();
        if (Config.IndependentInitializer)
        {
            sourceBuilder.AppendLine("#nullable enable");
            sourceBuilder.AppendLine();
        }
        sourceBuilder.AppendLine($"namespace {Config.NamespaceName} {{");
        sourceBuilder.AppendLine();
        sourceBuilder.AppendLine($"    partial class {Config.ClassName} {{");
        sourceBuilder.AppendLine();
        var nullable = Config.IndependentInitializer ? "?" : string.Empty;
        sourceBuilder.AppendLine($"        private Microsoft.UI.Composition.Compositor{nullable} _compositor;");
        sourceBuilder.AppendLine();
        sourceBuilder.AppendLine(ToSource(VariableDeclarations, 8));
        sourceBuilder.AppendLine(Config.IndependentInitializer
            ? $"        public void InitializeComposition(Microsoft.UI.Composition.Compositor compositor) {{"
            : $"        public {Config.ClassName}(Microsoft.UI.Composition.Compositor compositor) {{");
        sourceBuilder.AppendLine($"            _compositor = compositor;");
        sourceBuilder.AppendLine();
        sourceBuilder.Append(ToSource(InitializerBody, 12));
        sourceBuilder.AppendLine($"        }}");
        sourceBuilder.AppendLine();
        sourceBuilder.AppendLine($"    }}");
        sourceBuilder.AppendLine();
        sourceBuilder.AppendLine($"}}");
        return sourceBuilder.ToString();
    }
    
    /// <summary>
    /// Converts a list of lines to a formatted C# source code string.
    /// </summary>
    /// <param name="lines">Lines of code to format.</param>
    /// <param name="indent">Indentation level for the lines.</param>
    /// <returns>Formatted C# source code string.</returns>
    private static string ToSource(List<string> lines, int indent = 0)
    {
        StringBuilder sb = new();
        foreach (var l in lines.Select(static l => l.Trim()))
        {
            if (l.StartsWith("}") || l.StartsWith(")") || l.StartsWith("]")) indent -= 4;
            sb.AppendLine($"{new string(' ', indent)}{l}");
            if (l.EndsWith("{") || l.StartsWith("(") || l.StartsWith("[")) indent += 4;
        }
        return sb.ToString();
    }
}