using System.Text;
using DeclarativeComposition.CSharp;
using DeclarativeComposition.DCL.AST;

namespace DeclarativeComposition.CodeGen;

public static class CodeGenerator
{
    public static (string Filename, string SharpSource) GenerateSharpSource(RootNode astRoot)
    {
        Context context = new("DeclarativeComposition.Generated", "Composition")
        {
            IndependentInitializer = false
        };

        if (astRoot.Declaration is not null)
        {
            foreach (var property in astRoot.Declaration.Properties)
            {
                var propertyValue = property.Value;
                switch (property.Name.ToLower())
                {
                    case "class":
                    {
                        var fullClassName = (propertyValue as StringLiteralNode)!.Content;
                        var lastDotIndex = fullClassName.LastIndexOf('.');
                        if (lastDotIndex < 0) 
                        {
                            context.ClassName = fullClassName;
                        }
                        else
                        {
                            context.NamespaceName = fullClassName.Substring(0, lastDotIndex);
                            context.ClassName = fullClassName.Substring(lastDotIndex + 1);
                        }
                        break;
                    }
                    case "initializer":
                    {
                        var initializer = (propertyValue as StringLiteralNode)!.Content.ToLower();
                        context.IndependentInitializer = initializer switch
                        {
                            "independent" => true,
                            "constructor" => false,
                            _ => throw new ArgumentException($"Invalid initializer value: {initializer}")
                        };
                        break;
                    }
                }
            }
        }
        
        foreach (var node in astRoot.Body)
        {
            InterpretObjectNode(node, context);
        }

        return ($"{context.FullClassName}.g.cs", GenerateSource(context));
    }

    private static void InterpretObjectNode(ObjectNode node, Context context)
    {
        if (!MetaLibrary.Current.DeclarableCOMs.TryGetValue(node.Type, out var meta))
        {
            context.InitializerBody.Add($"// Unable to create an object with type '{node.Type}': No constructor or factory method found.");
            return;
        }
        if (!meta.Interpreter.CanInterpret(node))
        {
            context.InitializerBody.Add($"// Cannot interpret object of type '{node.Type}' with the current interpreter.");
            return;
        }
        meta.Interpreter.Interpret(node, context);
    }
    
    private static string GenerateSource(Context context)
    {
        StringBuilder sourceBuilder = new();
        sourceBuilder.AppendLine("// Generated by DeclarativeComposition");
        sourceBuilder.AppendLine();
        if (context.IndependentInitializer)
        {
            sourceBuilder.AppendLine("#nullable enable");
            sourceBuilder.AppendLine();
        }
        sourceBuilder.AppendLine($"namespace {context.NamespaceName} {{");
        sourceBuilder.AppendLine();
        sourceBuilder.AppendLine($"    partial class {context.ClassName} {{");
        sourceBuilder.AppendLine();
        var nullable = context.IndependentInitializer ? "?" : string.Empty;
        sourceBuilder.AppendLine($"        private Microsoft.UI.Composition.Compositor{nullable} _compositor;");
        sourceBuilder.AppendLine();
        sourceBuilder.AppendLine(IndentCode(context.FieldDeclarations, 8));
        sourceBuilder.AppendLine(context.IndependentInitializer
            ? $"        public void InitializeComposition(Microsoft.UI.Composition.Compositor compositor) {{"
            : $"        public {context.ClassName}(Microsoft.UI.Composition.Compositor compositor) {{");
        sourceBuilder.AppendLine($"            _compositor = compositor;");
        sourceBuilder.AppendLine();
        sourceBuilder.Append(IndentCode(context.InitializerBody, 12));
        sourceBuilder.AppendLine($"        }}");
        sourceBuilder.AppendLine();
        sourceBuilder.AppendLine($"    }}");
        sourceBuilder.AppendLine();
        sourceBuilder.AppendLine($"}}");
        return sourceBuilder.ToString();
    }

    private static string IndentCode(IEnumerable<string> lines, int indent = 0)
    {
        StringBuilder sb = new();
        foreach (var l in lines.Select(static l => l.Trim()))
        {
            if (l.StartsWith("}") || l.StartsWith(")") || l.StartsWith("]")) indent -= 4;
            sb.AppendLine($"{new string(' ', indent)}{l}");
            if (l.EndsWith("{") || l.StartsWith("(") || l.StartsWith("[")) indent += 4;
        }
        return sb.ToString();
    }
}